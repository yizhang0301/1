#include <SFML/Graphics.hpp>
#include <iostream>
#include <string>


using namespace std;

class ck {
private:
	sf::Clock clock;
	sf::Time start;
	sf::Time end;
	sf::Time elapsed;
	bool decrementing;
	bool isInfinite;
	bool final;
public:
	ck();
	ck(int s, int e);
	ck(bool in, int s1, int e1);
	int Time();
	int gettime();
	void restart();
	bool refinal();
};

ck::ck(int s, int e) {
	if (s > e) {
		decrementing = true;
	}
	else {
		decrementing = false;
	}
	start = sf::seconds(s);
	end = sf::seconds(e);
	final = false;
	isInfinite = false;
}

ck::ck(bool in, int s1, int e1) {
	if (s1 > e1) {
		decrementing = true;
	}
	start = sf::seconds(s1);
	end = sf::seconds(e1);
	final = false;
	isInfinite = true;
}

int ck::Time()
{
	elapsed = clock.Time();

	if (!decrementing) {
		if ((start + elapsed).asSeconds() == end.asSeconds()) {
			final = true;
		}
		return start.asSeconds() + elapsed.asSeconds();
	}
	if ((start - elapsed).asSeconds() == end.asSeconds()) {
		final = true;
	}
	return start.asSeconds() - elapsed.asSeconds();
}


int ck::gettime()
{
	return Time();
}

void ck::restart() {
	clock.restart();
}
bool ck::refinal() {
	return final;
}
int main()
{
	sf::RenderWindow window(sf::VideoMode(200, 200), "SFML works!");
	ck c = ck(10, 10);
	/*sf::Clock clock;
	sf::Time start;
	sf::Time end;
	sf::Time elapsed;
	start = sf::seconds(50);
	end = sf::seconds(50);*/
	while (window.isOpen())
	{
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
		}

		cout << "Incrementing Clock: " << c.gettime() << endl;

		if (c.refinal())
		{
			window.close();
		}
		window.clear();

		window.display();
	}

	return 0;
}
